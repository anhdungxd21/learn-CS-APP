
2.1 Information Storage
	- Máy tính hiện tại lưu trữ và xử lý thông tin được biểu thị dưới dạng tín hiệu hai giá trị. Các chữ số nhị phân hoặc bit
		tạo thành nền tảng của cuộc cách mạnh kỹ thuật số.
	- Two-valued signal có thể dễ dàng biểu diễn, lưu trữ và truyền đi. vd: lỗ được đục hoặc không được đục trên thẻ lỗ, diện áp
		cao hoặc thấp trên dây dẫn, hoặc từ tính được định hướng theo chiều kim đồng hồ hoặc ngược chiều kim đồng hồ.
	- Mạch điện tử cho việc lưu trữ thực hiện tính toán trên 2 giá trị tín hiệu rất đơm giản và đáng tin cậy, cho phép các nhà
		sản xuất tích hợp hàng triệu, hoặc thậm chí hàng tỉ của các mạch như vậy trên một chip silicon
	- Trong trường hợp cô lập, một bit đơn lẻ không hữu ích lắm. Khi nhóm các bit với nhau và áp dụng một số diễn giải mang lại ý nghĩa
		cho các mẫu bit có thể khác nhau, có thể biểu diễn các phần tử của bất kỳ tập hợp hữu hạn nào.
	- 3 đại diện quan trọng nhất của số :
		-> Unsigned encoding dưa trên ký hiệu nhị phân truyền thống, đại diện cho số lớn hơn hoặc bằng 0
		-> Two’s-complement encodings là cách phổ biến nhất buổi diễn số có dấu, số nguyên âm và nguyên dương
		-> Floating-point encodings là phiên bản base-2 của số thực
		Máy tính thực hiện các phép toán số học, chẳng hạn như phép cộng và phép nhân, với biểu diễn khác nhau, tương ứng trên
		số nguyên và số thực.
	- Máy tính sử dụng một số lượng bit giới hạn để mã hoá một số và do đó một số hoạt động có thể bị tràn(overflow) khi kết quả quá lơn
		để được biểu diễn.
	- Mặt khác, số học máy tính số nguyên đáp ứng nhiều tính chấp quen thuộc của số học số nguyên thực.
	- Máy tính có thể không tạo ra kết quả như mong đợi, nhưng ít nhất nó nhất quán!
	* floating-point
	- Số học dấy phẩu động có các tính chất toán học hoàn toàn khác. Tích của một tập hợp các số dương sẽ luông là số dương, mặc dù
		phần tràn sẽ mang lại giá trị đặc biệt +∞.
	- số học dấy phẩy động (Floating-point arthmetic) không có tính liên kết do độ chính xác hữu hạn của biểu diễn.
	- Sự khác biệt tính chất toán học giứ integer và floating-point bắt nguồn từ sự khác biệt trong cách chúng xử lý tính hữu hạn của các
		biểu diễn: - Integer có thể mã hoá trong một pham vi nhỏ nhưng chính xác
				   - floating-point mã hoá phạm vi rộng nhưng chỉ xấp xỉ.
	-> Bằng cách nghiên cứu các biểu diễn số trong thực tế, ta có thể hiểu phạm vi giá trị có thể được biểu diễn và các thuộc tính của phép
		toán số học khác nhau. Sử hiểu biết này rất quan trọng để viết các chương trình hoạt động chính xác với đầy đủ các giá trị số và
		có thể di động trêb các kết hợp khác nhau của máy, hệ điều hành và trình biên dịch.
		- Mố số lỗ hổng bảo mật máy tính đã phát sinh do một số yếu tố tinh vi của máy tính số học.
		- Ở thời đại trước, các lỗi trương trình chỉ gây bất tiện cho mọi người khi chúng tính cờ được kích hoạt, thì hiện nay có rất nhiều
			tin tặc cố gắng khai thác bất kỳ lỗi nào mà họ có thể tìm thấy để truy cập trái phép vào hệ thống của người khác. Điều này đặt ra
			nghĩa vụ cao hơn đối với các lập trình viên để hiểu cách chương trình của họ hoạt động và cách chúng có thể thực hiện để hành xử
			theo nhưng cách không mong muốn.
	- Thay vì truy cập các bit riêng lẻ trong bộ nhớ, hầu hết máy tính sử dụng những khối 8 bit(hoặc các byte) là đơn vị bộ nhớ có thể 
			cấp địa chỉ.
	- Một chương trình cấp máy(machine-level) xem bộ nhớ như một mảng rất lớn các byte, được gọi virtual memory.
	- Mỗi byte bộ nhớ được xác định bằng một số duy nhất được gọi là địa chỉ của nó, và tập hợp tất cả các địa chỉ có thể được gọi là
		không gian địa chỉ ảo(virtual address space).
	- Virtual address space chỉ là một hình ảnh khái niệm được trình bày cho chương trình cấp máy (machine-level). Việc triển khai thực
		sự sử dụng sự kết hợp của dynamic random access memory (DRAM), flash memory, disk storage, specical hardware, and operatin system
		software để cung cấp cho chương trình những gì có vẻ như là một mảng byte nguyên khối.
	2.1.1 Hexadecimal Notation
		- 1 byte bao gồm 8 bit
		- Hexadecimal(or simply "hex") sử dụng số "0" đến "9" cùng với chữ cái "A" đến "F" để đại diện cho 16 giá trị.
		- Trong C, hằng số bắt đầu với 0x hoặc 0X được hiểu là hexadecimal (hệ thập lục phân), chữ cái từ "A" đến "F" có thể biết hoa hoặc
			viết thường. vd :FA1D37B được viết là 0xFA1D37B hoặc 0xfa1d37b
		- Một nhiệm vụ phổ biến khi làm việc với các chương trình cấp máy là chuyển đổi thủ công giữa các biểu diễn thập phân, nhị phân
			và thập lục phân của các mẫu bit
		- Chuyển đổi giữa nhị phân và thập lục phân rất đơn giản, vì nó có thể được thực hiện một chữ số thập lục phân tại một thời điểm.
		- Chuyển bit sang hệ thập lục phân bằng cách chia nhỏ thành các nhóm 4 bit. Tuy nhiên, lưu ý nếu tổng số but không phải là bộ số
			của 4 nên đặt nhóm ngoài cùng bên trái là nhóm có ít hơn 4 bit, đệm số một cách hiệu quả bằng các số 0 ở đầu.
		74
	2.1.2 Data Sizes
		- Mọi máy tính đều có word size, cho biết kích thước danh nghĩa của dữ liệu con trỏ(pointer data).
		- Vì virtual address được mã hoá bởi word, nên tham số hệ thống quan trọng nhất được xác định bởi kích thước của word, là kích thước
			tối đa của virtual address space. Đối với máy có kích thước w-bit word, virtual address nằm trong khoảng 0 đến 2^w - 1
			cho phép chương trình truy cập tối đa gần 2^w byte.
		- 32-bit word size giới hạn virtual address space vào khoảng 4 gigabytes (4GB - 4x10 ^9)
		- 64-bit word size dẫn đến virtual address space có 16 exabytes (1.84 x 10^19 byte)
		- Hầu hết máy 64-bit có thể chạy chương trình được compiled cho máy 32-bit, một dạng tương thích ngược.
		-> gọi các chương trình là chương trình 32-bit hoặc chương trình 64-bit do sự khác biệt ở cách mà một chương trình được biên dịch,
			chứ không phải là loại máy mà nó chạy.
		- Máy tính và trình biên dịch hỗ trợ nhiều định dang dữ liệu để mã hoá theo nhiều cách khác nhau, như là integer và floating-point,
			cũng như độ dài khác nhau.
		- Ngôn ngữ C hỗ trợ nhiều kiểu dữ liệu cho cả integer và floating-point.
		- Sô lượng chính xác byte được dành cho kiểu dữ liệu phụ thuộc vào cách chương trình được compile.
		- Hầu hết các kiểu dữ liệu đều mã hoá các giá trị có dấu, trừ khi được đặt trước bởi từ khoá unsigned (không dấu) hoặc sử dụng khai báo
			không dấu cụ thể cho các kiểu dữ liệu có kích thước cố định. Ngoại lệ cho điều này là kiểu char.
		- Mặc dù hầu hết trình biên dịch và máy coi dữ liệu có dấu (signed), nhưng tiêu chuẩn C không đản bảo điều này, 
			lập trình viên nên sử dụng signed char để đbản bảo 1-byte signed value. Tuy nhiên trong nhiều ngữ cảnh, hành vi của chương trình
			không nhạy cảm với việc kiẻu dữ liệu char là signed hay unsigned.
		- a pointer sử dụng full word của chương trình.
		- Hầu hết các máy tính cũng hỗ trợ hai định dạng floating-point
			1. Độ chính xác đơn được định nghĩa trong C là float 4-byte
			2. độ chính xác kép là double 8-byte
		- Lập trình viên nên cố gắng làm cho các chương trình có thể di động trên các máy và compiler khác nhau.
			-> Một khía cạnh của tính di động là làm cho chương trình không nhạy cảm với kích thước chính xác của các loại dữ liệu khác nhau.
	2.1.3 Addressing and Byte Ordering
		- Đối với các đối tượng chương trình kéo dài nhiều byte, chúng ta phải thiết lập 2 quy ước
			1. Địa chỉ của đối tượng
			2. Cách chúng ta sắp xếp thứ tự các byte trong bộ nhớ.
	2.1.4 Representing Strings
	2.1.5 Representing Code
	2.1.6 Introduction to Boolean Algebra
	2.1.7 Bit-Level Operations in C
	2.1.8 Logical Operations in C
	2.1.9 Shift Operations in C
2.2 Integer Representations
2.3 Intger Arithmetic
2.4 Floating Point
2.5 Sumary