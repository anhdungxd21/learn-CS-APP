
2.1 Information Storage
	- Máy tính hiện tại lưu trữ và xử lý thông tin được biểu thị dưới dạng tín hiệu hai giá trị. Các chữ số nhị phân hoặc bit
		tạo thành nền tảng của cuộc cách mạnh kỹ thuật số.
	- Two-valued signal có thể dễ dàng biểu diễn, lưu trữ và truyền đi. vd: lỗ được đục hoặc không được đục trên thẻ lỗ, diện áp
		cao hoặc thấp trên dây dẫn, hoặc từ tính được định hướng theo chiều kim đồng hồ hoặc ngược chiều kim đồng hồ.
	- Mạch điện tử cho việc lưu trữ thực hiện tính toán trên 2 giá trị tín hiệu rất đơm giản và đáng tin cậy, cho phép các nhà
		sản xuất tích hợp hàng triệu, hoặc thậm chí hàng tỉ của các mạch như vậy trên một chip silicon
	- Trong trường hợp cô lập, một bit đơn lẻ không hữu ích lắm. Khi nhóm các bit với nhau và áp dụng một số diễn giải mang lại ý nghĩa
		cho các mẫu bit có thể khác nhau, có thể biểu diễn các phần tử của bất kỳ tập hợp hữu hạn nào.
	- 3 đại diện quan trọng nhất của số :
		-> Unsigned encoding dưa trên ký hiệu nhị phân truyền thống, đại diện cho số lớn hơn hoặc bằng 0
		-> Two’s-complement encodings là cách phổ biến nhất buổi diễn số có dấu, số nguyên âm và nguyên dương
		-> Floating-point encodings là phiên bản base-2 của số thực
		Máy tính thực hiện các phép toán số học, chẳng hạn như phép cộng và phép nhân, với biểu diễn khác nhau, tương ứng trên
		số nguyên và số thực.
	- Máy tính sử dụng một số lượng bit giới hạn để mã hoá một số và do đó một số hoạt động có thể bị tràn(overflow) khi kết quả quá lơn
		để được biểu diễn.
	- Mặt khác, số học máy tính số nguyên đáp ứng nhiều tính chấp quen thuộc của số học số nguyên thực.
	- Máy tính có thể không tạo ra kết quả như mong đợi, nhưng ít nhất nó nhất quán!
	* floating-point
	- Số học dấy phẩu động có các tính chất toán học hoàn toàn khác. Tích của một tập hợp các số dương sẽ luông là số dương, mặc dù
		phần tràn sẽ mang lại giá trị đặc biệt +∞.
	- số học dấy phẩy động (Floating-point arthmetic) không có tính liên kết do độ chính xác hữu hạn của biểu diễn.
	- Sự khác biệt tính chất toán học giứ integer và floating-point bắt nguồn từ sự khác biệt trong cách chúng xử lý tính hữu hạn của các
		biểu diễn: - Integer có thể mã hoá trong một pham vi nhỏ nhưng chính xác
				   - floating-point mã hoá phạm vi rộng nhưng chỉ xấp xỉ.
	-> Bằng cách nghiên cứu các biểu diễn số trong thực tế, ta có thể hiểu phạm vi giá trị có thể được biểu diễn và các thuộc tính của phép
		toán số học khác nhau. Sử hiểu biết này rất quan trọng để viết các chương trình hoạt động chính xác với đầy đủ các giá trị số và
		có thể di động trêb các kết hợp khác nhau của máy, hệ điều hành và trình biên dịch.
		- Mố số lỗ hổng bảo mật máy tính đã phát sinh do một số yếu tố tinh vi của máy tính số học.
		- Ở thời đại trước, các lỗi trương trình chỉ gây bất tiện cho mọi người khi chúng tính cờ được kích hoạt, thì hiện nay có rất nhiều
			tin tặc cố gắng khai thác bất kỳ lỗi nào mà họ có thể tìm thấy để truy cập trái phép vào hệ thống của người khác. Điều này đặt ra
			nghĩa vụ cao hơn đối với các lập trình viên để hiểu cách chương trình của họ hoạt động và cách chúng có thể thực hiện để hành xử
			theo nhưng cách không mong muốn.
	- Thay vì truy cập các bit riêng lẻ trong bộ nhớ, hầu hết máy tính sử dụng những khối 8 bit(hoặc các byte) là đơn vị bộ nhớ có thể 
			cấp địa chỉ.
	- Một chương trình cấp máy(machine-level) xem bộ nhớ như một mảng rất lớn các byte, được gọi virtual memory.
	- Mỗi byte bộ nhớ được xác định bằng một số duy nhất được gọi là địa chỉ của nó, và tập hợp tất cả các địa chỉ có thể được gọi là
		không gian địa chỉ ảo(virtual address space).
	- Virtual address space chỉ là một hình ảnh khái niệm được trình bày cho chương trình cấp máy (machine-level). Việc triển khai thực
		sự sử dụng sự kết hợp của dynamic random access memory (DRAM), flash memory, disk storage, specical hardware, and operatin system
		software để cung cấp cho chương trình những gì có vẻ như là một mảng byte nguyên khối.
	2.1.1 Hexadecimal Notation
		- 1 byte bao gồm 8 bit
		- Hexadecimal(or simply "hex") sử dụng số "0" đến "9" cùng với chữ cái "A" đến "F" để đại diện cho 16 giá trị.
		- Trong C, hằng số bắt đầu với 0x hoặc 0X được hiểu là hexadecimal (hệ thập lục phân), chữ cái từ "A" đến "F" có thể biết hoa hoặc
			viết thường. vd :FA1D37B được viết là 0xFA1D37B hoặc 0xfa1d37b
		- Một nhiệm vụ phổ biến khi làm việc với các chương trình cấp máy là chuyển đổi thủ công giữa các biểu diễn thập phân, nhị phân
			và thập lục phân của các mẫu bit
		- Chuyển đổi giữa nhị phân và thập lục phân rất đơn giản, vì nó có thể được thực hiện một chữ số thập lục phân tại một thời điểm.
		- Chuyển bit sang hệ thập lục phân bằng cách chia nhỏ thành các nhóm 4 bit. Tuy nhiên, lưu ý nếu tổng số but không phải là bộ số
			của 4 nên đặt nhóm ngoài cùng bên trái là nhóm có ít hơn 4 bit, đệm số một cách hiệu quả bằng các số 0 ở đầu.
		74
	2.1.2 Data Sizes
		- Mọi máy tính đều có word size, cho biết kích thước danh nghĩa của dữ liệu con trỏ(pointer data).
		- Vì virtual address được mã hoá bởi word, nên tham số hệ thống quan trọng nhất được xác định bởi kích thước của word, là kích thước
			tối đa của virtual address space. Đối với máy có kích thước w-bit word, virtual address nằm trong khoảng 0 đến 2^w - 1
			cho phép chương trình truy cập tối đa gần 2^w byte.
		- 32-bit word size giới hạn virtual address space vào khoảng 4 gigabytes (4GB - 4x10 ^9)
		- 64-bit word size dẫn đến virtual address space có 16 exabytes (1.84 x 10^19 byte)
		- Hầu hết máy 64-bit có thể chạy chương trình được compiled cho máy 32-bit, một dạng tương thích ngược.
		-> gọi các chương trình là chương trình 32-bit hoặc chương trình 64-bit do sự khác biệt ở cách mà một chương trình được biên dịch,
			chứ không phải là loại máy mà nó chạy.
		- Máy tính và trình biên dịch hỗ trợ nhiều định dang dữ liệu để mã hoá theo nhiều cách khác nhau, như là integer và floating-point,
			cũng như độ dài khác nhau.
		- Ngôn ngữ C hỗ trợ nhiều kiểu dữ liệu cho cả integer và floating-point.
		- Sô lượng chính xác byte được dành cho kiểu dữ liệu phụ thuộc vào cách chương trình được compile.
		- Hầu hết các kiểu dữ liệu đều mã hoá các giá trị có dấu, trừ khi được đặt trước bởi từ khoá unsigned (không dấu) hoặc sử dụng khai báo
			không dấu cụ thể cho các kiểu dữ liệu có kích thước cố định. Ngoại lệ cho điều này là kiểu char.
		- Mặc dù hầu hết trình biên dịch và máy coi dữ liệu có dấu (signed), nhưng tiêu chuẩn C không đản bảo điều này, 
			lập trình viên nên sử dụng signed char để đbản bảo 1-byte signed value. Tuy nhiên trong nhiều ngữ cảnh, hành vi của chương trình
			không nhạy cảm với việc kiẻu dữ liệu char là signed hay unsigned.
		- a pointer sử dụng full word của chương trình.
		- Hầu hết các máy tính cũng hỗ trợ hai định dạng floating-point
			1. Độ chính xác đơn được định nghĩa trong C là float 4-byte
			2. độ chính xác kép là double 8-byte
		- Lập trình viên nên cố gắng làm cho các chương trình có thể di động trên các máy và compiler khác nhau.
			-> Một khía cạnh của tính di động là làm cho chương trình không nhạy cảm với kích thước chính xác của các loại dữ liệu khác nhau.
	2.1.3 Addressing and Byte Ordering
		- Đối với các đối tượng chương trình kéo dài nhiều byte, chúng ta phải thiết lập 2 quy ước
			1. Địa chỉ của đối tượng
			2. Cách chúng ta sắp xếp thứ tự các byte trong bộ nhớ.
		- Trong hầu hết máy tính, một object nhiều byte được được lưu trữ dưới dạng một chuỗi byte liền kề, với địa chỉ của đối tượng được
			cung cấp bởi địa chỉ nhỏ nhất của các byte được sử dụng.
		- Để sắp xếp các byte đại diện cho một đối tượng, có 2 quy ước chung:
			1. Coi như có w-bit integer được đại diện như sau [w-1, w-2, ...., 1, 0], w-1 là bit cao nhất và 0 là thấp nhất, Giả định w là bội
				của 8, các bit đó có thể nhóm thành các byte, với byte cao nhất [w-1, w-2, ..., w-8] với byte thấp nhất [7, 6, ..., 0]\
				và các byte khác có bit ở giữa.
			2. Một số máy chọn lưu object trong memory sắp xếp từ lest significant byte to most
			-> 	1. The former convention-where the least significant byte comes first-is referred to little endian.
				2. The latter convention-where the most significant byte comes first-is referred to big endian.
		- Hầu hết các máy tương thích với Intel đều hoạt động độc quyền ở chế độ little-endian.
		- Nhiều chip vi xử lý gần đây là loại bi-endian, có nghĩa là chúng có thể config để vận hành little endian hoặc big endian.
			Trong thực tế, byte ordering sẽ trở nên cố định khi một hệ điều hành cụ thể được chọn. Vd: Chip ARM có thể vận hành
			ở little-endian hoặc big-endian, nhưng 2 hệ điều hành phổ biến cho chips arm là Android và IOS chỉ vận hành ở chế độ little-endian.
		- Với hầu hết lập trình viên, byte ordering được sử dụng bởi máy tình của họ là hoàn toàn vô hình, các chương trình biên dịch cho một
		trong hai loại máy cho kết quả giống hệt nhau.
		- Đôi khi thứ tự byte trở thành vấn đề
			- 1. Khi dữ liệu nhị phân được giao tiếp qua mạng giữa các máy khác nhau. Một vấn đề phổ biến là dữ liệu được tạo ra bởi một máy little-endian
				được gửi đến một máy big-endian và ngược lại, dẫn đến việc các byte trong word bị đảo ngược thứ tự đối với chương trình nhận.
			-> Để tránh những vấn đề như vậy, mã được viết cho các ứng dụng mạng phải tuân theo quy ước đã thiết lập về thứ tự byte để đản bảo máy gửi
				chuyển đổi biểu diễn bên trong của nó sang chuẩn mạng, trong khi máy nhận chuyển đổi chuẩn mạng thành biểu diễn bên trong nó.
			- 2. Trường hợp thứ 2 mà thứ tự byte trở nên quan trọng là khi xem xét các chuỗi byte biểu diễn dữ liệu số nguyên. Điều này xảy ra thường xuyên
				khi kiểm tra các trương trình cấp máy.
			- 3. Trường hợp 3 khi mà chương trình được viết ra normal type của hệ thống.Trong ngôn ngữ C, điều này có thể thực hiện bằng cách
				cast hoặc union để cho phép một đối tượng được tham chiếu theo một kiểu dữ liệu khác mà nó được tạo ra. Các thủ thuật viết mà như vậy 
				không được khuyến khích đối với hầu hết lập trình ứng dụng, nhưng chúng có thể khá hữu ích và thậm chi cần thiết cho lập trình cấp hệ thống
	2.1.4 Representing Strings
		- Một string trong C được mã hoá dưới dạng một mảng các ký tự và được kết thúc bởi ký tự null (having value 0)
		- Mỗi ký tự được đại diện bởi một số bộ mã hoá tiêu chuẩn, phổ biến nhất là ASCII.
		-> Do đó nếu chạy show_byte thông thường với các đối số "12345" và 6(bao gồm ký tự kết thúc), nhận được kết quả 31 32 33 34 35 00. Quan sát mã ASCII cho 
			chữ số thập phân x là 0x3x và byte kết thúc có thể biểu diễn hex 0x00. Kết quả này tương tự này sẽ nhận được trên bất kỳ hệ thống nào sử dụng ASCII 
			làm mã ký tự của nó, không phụ thuộc vào quy ước về thứ tự byte và kích thước word. Do đó, dữ liệu văn bản độc lập với nền tảng hơn dữ liệu nhị phân.
	2.1.5 Representing Code
		- Các loại máy khác nhau sử dụng các lệnh và mã hoá khác nhau và không tương thích. Ngay cả những bộ xử lý giống hệt nhau chạy hệ điều hành khác nhau
			chạy các hệ điều hành khác nhau cũng có sự khác biệt trong quy ước mã hoá của chúng và do đó không tương thích với hệ nhị phân.
			Mã hoá nhị phân hiến khi portable across các kết hợp khác nhau giữa máy và hệ điều hành.
		- Một khái niệm cơ bản về hệ thống máy tính là một chương trình, từ quan điểm của máy, chỉ đơn giản là một chuỗi các byte. Máy không có thông tin về
			chươn trình nguồn ban đầu, ngoại trừ một số bảng phụ được duy trì để hỗ trợ gỡ lỗi.
	2.1.6 Introduction to Boolean Algebra
		- | for OR
		- & for AND
		- ~ for NOT
		- ^ for XOR
	2.1.7 Bit-Level Operations in C
		- Một tính năng hữu ích của C là nó hỗ trợ các hoạt động Boolean bitwise
		- Một cách sử dụng phổ biến của bit-level là thực hiện phép toán masking, masking là một mẫu các bit được lựa chọn một word.
	2.1.8 Logical Operations in C
		- C cũng cung cấp các toán tử logic ||, &&, and ! tương ứng với OR, AND và NOT
		- Các phép toán logic coi bất kỳ đối số khác 0 là đại diện đúng và đối số 0 là đại diện sai. Chúng trả về 1 hoặc 0, cho biết kết quả tương ứng
			là true hoặc false.
		- Quan sát rằng một phép toán bitwise sẽ có hành vi khớp với hành vi của phép đối logic của nó chỉ trong trường hợp đặc biệt trong đó các đối số
			bị giới hạn ở 0 hoặc 1
		- Điểm khác biệt quan trong thứ 2 giữa các toán tử logic '&&' và '||' so với các toán tử cấp bit '&' và '|' của chúng là các toán tử không 
			đánh giá đối số thứ hai của chúng nếu kết quả của biểu thức có thể được xác định bởi đánh giá đối số đầu tiên.
	2.1.9 Shift Operations in C
		- C cũng cung cấp một tập hợp các phép toán dịch chuyển để dịch chuyển các mẫu bit sang trái và sang phải.
		- Nghĩa là, x được dịch chuyển k bit sang trái, loại bỏ k bit most significant  và lấp đầy đầu bên phải với k số không.
		- Sô lượng dịch chuyển phải là một giá trị trong khoảng 0 đến w-1. Các phép toán dịch chuyển liên kết từ trái sang phải, do đó 
			x << j << k tương đương với (x<<j)<<k.
		- Có một phép toán dịch chuyển sang bên phải tương ứng, được viết bằng C là x >> k, nhưng nó có một hành vi hơi tinh vi. Nói chung, máy móc
			hỗ trợ hai hình thức dịch chuyển phải:
				1. Logical - Một logical dịch phải, lấp đầy trái với k zeros
				2. Arthmetic - Một dịch chuyển phải arthmetic lấp đầy đầu bên trái với k lần lặp lại của w-1 (most significant bit)
		- C standard không xác định chính xác loại right shift nào nên được sử dụng với các số có dấu - có thể sử dụng arthmetic hoặc logical shift
			có thể được sử dụng.
			-> Điều này không may có nghĩa là bất kỳ mã nào giả định dạng này hay dạng khác sẽ có khả năng gặp các vấn đề về tính di động.
				Tuy nhiên, trên thực tế, hầu hết tất cả các tổ hợp máy/ trình biên dịch đều sử dụng dịch chuyển phải số học cho dữ liệu có dấu
				và nhiều lập trình viên cho rằng trường hợp này xảy ra. Mặc khác, đối với dữ liệu không dấu shift bit sẽ là logical
		- Ngược lại với C, java có một định nghĩa chính xác về cách thực hiện các right shift. x >> k theo arithmetic trong khi x >>> k shift là logical
2.2 Integer Representations
	- Trong phần này, chúng tôi mô tả hai cách khác nhau mà các bit có thể được sử dụng để mã hoá số nguyên-một cách chỉ có thể biểu diễn các số 
		không âm và một có thể biểu diễn các số âm, số 0 và số dương.
	- B2T - function - Binary to Two’s complement
	- B2U - Function - Binary to unsigned
	- U2B - Function - Unsigned to binary
	- U2T - Function - Unsigned to two's-Complement
	- T2B - Function - Two's complement to binary
	- T2U - Function - Two's complement to unsigned
	
	- TMin - Constant - Minimum two's-Complement value
	- TMax - Constant - Maximum two's-Complement value
	- UMax - Constant - Maximum unsigned value
	2.2.1 Integral Data Type
		- C hỗ trợ nhiều kiểu dữ liệu tích phân
			1. số nguyên hữu hạn, cùng với các phạm vi giá trị mà chúng có thể cho các chương trình 32 và 64 bit "điển hình". Mỗi loại có thể chỉ định
				kích thước từ khoá char, short, long, cũng như dấu của chúng.
				- Dựa trên phân bổ byte, các kích thước khác nhau cho phép các phạm vi giá trị khách nhau đươc biểu diễn. Phạm vi phục thuộc vào máy
					duy nhất được chỉ định cho máy chỉ định kích thước long. Hầu hết các chương trình 64bit sử dụng biẻu diễn 8 byte, 32 bit - 4 byte.
				- Các tiêu chuẩn C xác định phạm vi giá trị tối thiểu mà mỗi kiểu dữ liệu phải có để đại diện
	2.2.2 Unsigned Encodeings
		- 
	2.2.3 Two's-Complement Encodeings
		- đối với nhiều ứng dụng, đại diện cho các giá trị âm. Biểu diễn phổ biến nhất của các số có dấu là bổ xung hai phần (two's-complement).
			Điều này được xác định bằng cách đại diện bit most significant của word có trọng số âm.
		- Bit quan trọng nhất w-1 còn được gọi là sign bit. "weight" của nó là -2w-1 phủ định của "weight" trong một biểu thức không dấu.
			Khi sign bit đặt là 1 thì nó đại diện cho số âm, và khi được set là 0 thì giá trị sẽ là không âm.
		1. phạm vi của two's-Complement là không đối xứng:
			|TMin| = |TMax| +1, nghĩa là không có số dương cặp với Tmin. Như vậy sẽ dẫn dến một số tính cất đặc biện của số học twos-complement và có thể
			là nguồn gốc của các lỗi chương trình tinh vi.
			- Sự bất đối xứng này nảy sinh do một nửa số mẫu bit( những mẫu với sign bit set thành 1) đại diện cho số âm, trong khi một nửa (những mẫu
				bit được đặt thành 0) đại diện cho số không âm. Vì 0 lá số không âm, điều này có nghĩa là nó có thể đại diện cho một số dương ít hơn số âm.
		2. Giá trị không dấu lớn nhất chỉ lớn hơn 2 lần giá trị two's-complement UMax = 2TMax +1. Tất cả các mẫu bit biểu thị số âm trong two's-complement 
			đếu trở thành giá trị dương trong biểu diễn không dấu.
		- -1(âm 1) có các bit giống với UMax - một chuỗi tất cả đều là 1.
		- Số 0 được đại diện bởi 1 chuối tất cả đều là 0.
		- Các tiêu chuẩn C không yêu cầu các số nguyên có dấu phải được biết diễu dưới dạng two's-complement nhưng gần như tất cả các máy đề làm vậy
		- Các lập trình viên quan tâm đến việc tối da hoá tính di động trên tất cả các máy có thể không nên giả định bất kỳ phạm vi giá trị có thể biểu
			diễn cụ thể nào, cũng như không nên giả định bất kỳ đại diện cụ thể nào của các số có dấu.
			- Mặt khác, nhiều chương trình được viết với giả định là biểu diễn bổ sung 2 phần (two's-complement) của các số có dấu và các phạm vi "điển hình"
				được hiển thị ở F2.9 và F 2.10, và các chương trình này có thể portable trên nhiều loại máy tính và trình biên dịch.
		- Tiểu chuẩn Java khá cụ thể về các phạm vi và biểu diễn kiểu dữ liệu số nguyên. Nó yêu cầu biểu diễn bổ xung 2 phần (twos-complement) với các phạm vi
			chính xác được hiển thị cho trường hợp 64-bit. Trong Java, kiểu dữ liệu đơn được gọi là byte thay vì char, các yêu cầ chi tiết này nhằm cho phép
			các chương trình java hoạt động giống nhau bất kể máy hoặc hệ điều hành đang chạy chúng.
	2.2.4 Conversions between Signed and Unsigned
		- C cho phép ép các kiểu dữ liệu số khác nhau
		- Tác dụng của việc ép kiểu là giữ cho các giá trị bit giống hệt nhau nhưng thay đổi cách các bit này được diễn giải.
			-> Đây là quy tắc chung về cách hầu hết các triển khai C xử lý chuyển đổi giữa các số có dấu và không có dấu với cùng kích thước word-các giá trị
				số có thể thay đổi nhưng các bit pattern thì không.
	2.2.5 Signed versus Unsigned in C
		- C hỗ trợ cả số học có dấu và không dấu cho tất cả các kiểu dữ liệu số nguyên của nó.
		- Mặc dù tiêu chuẩn C không chỉ định cách biểu diễn cụ thể của các số có dấu, nhưng hầu hết cả các máy để sử dụng phần bù của hai. Nói chung, hầu hết
			các số là signed theo mặc định.
		- C cho phép chuyển đổi giữa không dấu và có dấu. Mạc dù tiêu chuẩn C không chỉ định chính xác cách thực hiện chuyển đổi này, nhưng hầy hết các hệ thống
			đều tuân theo quy tắc biểu diễn bit bên dưới không thay đổi
	2.2.6 Expanding the Bit Representations of a Number
		- Một hoạt động phổ biến là chuyển đổi giữa các số nguyên có kích thước từ khác nhau trong khi vẫn giữ nguyên giá trị số. Điều này có thể không thực
			hiện được khi kiểu dữ liệu đích quá nhỏ để thể hiện giá trị mong muốn. Tuy nhiên luôn có thể chuyển đổi từ một kiểu dữ liệu nhỏ hơn sang lớn hơn.
		- Để chuyển đỏi một số không dấu sang một kiểu dữ liệu lớn hơn, chúng ta có thể chỉ cần thêm các số 0 ở đầu vào.
		- Để chuyển đổi số two's-complement sang kiểu dữ liệu lớn hơn, quy tắc là thực hiện mở rộng dấu hiệu, thêm các bản sao của bit quan trọng nhất vào biểu
			diễn.
	2.2.7 Truncating Number
	2.2.8 Advice on Signed versus Unsigned
		- Như chúng ta đã thấy, việc chuyển ngầm từ có dấu sang không dấu dẫn đến một số hành vi không trực quan. Các tính năng không trực quan thường dẫn đến
			lỗi chương trình và những tính năng liên quan đến các sắc thái của truyền ngầm có thể đặc biệt khó nhìn thấy. Vì quá trình ép kiểu diễn ra mà không
			có bât kỳ dấu hiệu rõ ràng nào trong mã, các lập trình viên thường bỏ qua các tác động của nó.
		- Nhiều cách mà các đặc điểm tinh vi của số học không dấu, và dặc biệt là sự chuyển đổi ngầm định từ có đấu sang không dấu, có thể dẫn đến lỗi hoặc lỗ
			hổng. Trên thực tế, ít ngôn ngữ nào khác ngoài C hỗ trợ số nguyên không dấu. -> những nhà thiết kế ngôn ngữ khác coi chúng là những rắc rối nhiều
			hơn những gì chúng đang có.
			Vd: Java chỉ hỗ trợ các số ngyên có dấu và số học two's-complement. Toán tử dịch phải bình thường >> được đản bảo thực hiện một dịch chuyển số học.
				Toán tử >>> được định nghĩa để thực hiện chuyển dịch phải logica
		- Các giá trị không dấu rất hữu ích khi chúng ta muốn coi các word chỉ là tập hợp các bit không có diễn giải số.
			-> Điều này xảy ra, vd khi đóng gói một word với các flag mô tả các điều khiện Boolean khác nhau. Địa chỉ tự nhiên là không có dấu vì vậy các nhà lập
				trình hệ thống nhận thấy các loại không có dấu là hữu ích. Các giá trị không dấu cũng hữu ích khi triển khai các gói toán học cho số modular
				và số học đa chính xác, trong đó các số được biểu diễn bằng mảng của word (array of word)
2.3 Intger Arithmetic
	- Nhiều lập trình mới bắt đầu ngạc nhiên khi thấy rằng phép cọng hai số dương có thể mang lại kết quả âm và phép so sánh x ,y có thể mang kết quả khác với phép
		so sánh x-y<0
	- Các thuộc tính này là hiện vật của bản chất hữu hạn của số học máy tính. Hiểu các sắc thái của số học máy tính có thể giúp các lập trình viên viết mã đáng
		tin cậy hơn.
	2.3.1 Unsigned Addition
		- Xem sét 2 số không âm x và y, 0 <= x,y <2^w. Mỗi giá trị  này có thể được biểu diễn bằng một số không dấu w-bit
		- Tuy nhiên, nếu chúng ta tính tổng của chúng, chúng ta có một phạm vi khả dĩ 0 <= x + y <= (2^w+1) -2. Để biểu diễn phép cộng này có thể yêu cầu w+1 bits.
		- Nếu chúng ta duy trì tổng dưới dạng số (w +1)-bit và thêm nó vào một giá trị khác, chúng ta có thể yêu cầu w+2 bit..v.v.v.
			-> "Làm phát kích thước từ" tiếp tục này có nghĩa là chúng ta không thể đặt bất kỳ ràng buộc nào vào kích thước từ cần thiết để thể hiện đầy đủ kết quả
				của các phép toán số học.
		- Một số ngôn ngữ lập trình, chẳng hạn như Lisp, thực sự hỗ trợ số học có kích thước tuỳ ý để cho phép các số nguyên có khích thước bất kỳ (trong giới hạn
			bộ nhớ của máy tính).
		- Thông thường hơn, các ngôn ngữ lập trình hỗ trợ số học kích thước cố định và do đó các phép toán như "cộng" và "nhân" khác với các phép toán đối ứng
			của chúng đối với số nguyên.
		- Tổng của 9 và 12 là 21, có biểu diễn [10101]. Nhưng nếu chúng ta loại bỏ bit cao nhất, chúng ta nhận được [0101], nghĩa là, giá trị thập phân 5.
			Điều này khớp với giá trị 21 mod 16 = 5;
	2.3.2 Two’s-complement Addition
	2.3.3 Two’s-complement Negation
	2.3.4 Unsigned Multiplication
	2.3.5 Two’s-complement Multiplication
	2.3.6 Multiplying by Constant
	2.3.7 Dividing by Powers of 2
	2.3.8 Final Thoughts on Integer Arithmetic
2.4 Floating Point
2.5 Sumary

