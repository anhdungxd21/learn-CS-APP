Code là chỉ là thức để mô tả cách triển khai, đằng sau nó là những khái niệm khổng lồ

Chapter 1: A Tour of Computer System
	Begin: You will learn practical skills 
		- How to avoid strange numerical errors caused by the way that computers represent numbers.
		- How to optimize your C code by using clever tricks that exploit the design of modern processors
		  your processors and memory systems.
		- How the compiler implements procedure calls and how to use this knowledge to avoid the security holes
		  from buffer overflow vulnerabilities that plague(tai hoạ) network and Internet software.
		- How to recognize and avoid the nasty errors during linking that confound the average programmer.
		- How to write your own Unix shell, your own dynamic storage allocation package, and even your own Web server.
		- The promises and pitfalls of concurrency, a topic of increasing importance as multiple processor cores
		  are integrated onto single chips.
	1.1 Information Is Bits + Context
		- Tất cả thông tin trong hệ thống (include disk files), chương trình lưu trữ trong bộ nhớ, user data
		  và data transferred across a network - được đại diện bởi các bits.
		- Cách duy nhất để phân biệt bit thuộc đối tượng dữ liệu nào là ngữ cảnh chúng ta xem chúng.
		- Trong bối cảnh khác nhau, một chuỗi byte có thể đại diện cho integer, float-point number,
		  character string, or machine instruction.
	1.2 Program Are Translated by Other Programs into Different Forms
		Chương trình bắt đầu là một chương trình bậc cao, bởi vì nó có thể đọc và hiểu bởi con người.
		Tuy nhiên, để có thể chạy chương trình, bản thân nó phải được 1 chương trình khác dịch thành chỉ 
		thị ngôn ngữ máy bậc thấp. Những chỉ thị này sẽ được đóng gói trong form được gọi là 
		"Execuatable object program" và lưu trữu dưới dạng nhị phân. Cũng được gọi dưới cái tên "executable object files".
		- Việc dịch được thực hiện trong chuỗi 4 giai đoạn Preprocessor, compiler, assembler, and linker
			- Preprocessor. preprocessor (cpp) chỉnh sửa chương trình C gốc theo chỉ thị bắt đàu với ký tự "#".
				#include <studio.h> tells the preprocessor to read the contents of the systems header file stdio.h
				and insert it directly into the program text. (hello.c -> hello.i)
			- Compiler: The compiler (cc1) dịch chương trình hello.i - > hello.s. Nó chứa một assembly-language program.
				Assembly language hữu dụng bởi vì nó cung cấp output chung cho các compiler khác nhau cho các ngôn ngữ
				bậc cao khác nhau.
			- Assembler: The assembler (as) dịch hello.s sang chỉ thị ngôn ngữ máy và đóng gói lại
				"relocatable object program" và lưu kết quả thành file hello.o
				file này chứa bytes to encode the instructions for function main.
				Nếu đọc bằng text editer sẽ hiển thị ký tự vô nghĩa.
			- Linker: Merge những file thư viện *.o và linker (ld) thành file hello có khả năng thực thi.
	1.3 It Pays To Understand How Compilation System Work
		- Optimizing program performance: 
			- Trình compiler hiện đại là một công cụ tinh vi và thường sản xuất ra mã tốt.
			  Là một programmer, chúng ta không cần biết hoạt động bên trong của trình biên dịch để
			  viết mã hiệu quả. 
			  Tuy nhiên, để đưa ra quyết định viết mã tốt trong các chương trình, chúng ta cần có hiểu biết
			  cơ bản về mã cấp máy và cách trình biên dịch chuyển các câu lệnh C khác nhau thành mà máy
			  - Liệu switch có nhanh hơn chuỗi if-else?
			  - Bao nhiêu chi phí phát sinh bởi 1 lệnh gọi hàm?
			  - Vòng lặp while có hiệu quả hơn vòng lặp for hay không?
			  - Các tham chiếu con trỏ có hiệu quả hơn chỉ mục mảng không?
			  - Tại sao vòng lặp chạy nhanh hơn nếu chúng ta tính tổng bằng biến local thay vì
			    argument truyền bằng tham chiếu?
			  - Làm thế nào một hàm có thể chạy nhanh hơn khi chúng ta chỉ cần sắp xếp lại dấu ngoặc đơn
			    trong một biểu thức số học?
			  -> Chapter 3, 5
		- Understanding link-time errors:
			- Một số lỗi lập trình phức tạp nhất có liên quan đến hoạt động của trình liên kết, đặc biệt
				khi bạn đang cố gắng xây dựng các hệ thống phần mềm lớn
				- what does it mean when the linker reports that is cannot resolve a reference?
				- What is the difference between a static variable and a globel variable?
				- What happens if you define two globel variables in different C files with the same name?
				- What is the difference between a static library and a dynamic library?
				- Why does it matter what order we list libraries on the command line?
				- And scariest of all, why do some linker-ralated errors not appear until rune time?
				-> Chapter 7
		- Avoiding security holes:
			- Nhiều năm trời, buffer overflow vulnerabilities đã gây ra nhiều lỗ hổng bảo mật trong mạng và máy
				chủ internet.
			- Các lỗ hổng này tồn tại bởi vì quá ít lập trình viên hiểu việc cần phải cẩn thận hạn chế số lượng
				dữ liệu được chấp nhận từ nguồn không đang tin cậy.
			- Bước đầu tiên khi học lập trình an toàn là biểu hậu quả của cách dữ liệu và thông tin điều khiển được lưu
				trữ trên stack của chương trình.
	1.4 Processors Read and Interpret Instruction Stored in Memory
		1.4.1 Hardware Organization of a System
			Buses:
				- Chạy xuyên suốt hệ thống là một tập hợp các ống dẫn điện được gọi là bus mang các byte thông tin qua lại
				giữa các thành phần.
				- Bus thường được thiết kế để vận chuyển số lượng byte có kích thước cố định được gọi là "words".
				- Số lượng của byte trong word (the word size) là một tham số hệ thống cơ bản khác nhau giữa các hệ thống.
			I/O Devices:
				- Thiết bị Input/Output (I/O) là hệ thống kết nối tới thể giới bên ngoài.
				- Mỗi thiết bị I/O được kết nối tới I/O bus thông qua controller hoặc adapter.
				- Controller là bộ chip trong chính thiết bị hoặc trên bảng mạch in chính của hệ thông (motherboard).
				- A adapter is a card that plugs into a slot on the motherboard.
			Main Memory:
				- Main memory là thiết bị lưu trữ tạm thời, lưu trữ cả chương trình lẫn dữ liệu mà chương trình thao túng 
				  trong khi bộ xử lý đang thực thi chương trình đó.
				- Về mặt vật lý, main memory bao giồm một tập hợp của dynamic random access memory (DRAM) chips.
				- Về logic, memory được tổ chức như là một mảng tuyến tính của các bytes, mỗi byte có địa chỉ duy nhất
				  của nó (array index) bắt đầu từ 0.
				- Nói chung, mỗi lệnh máy cấu thành một chương trình có thể bao gốm một số byte thay đổi.
			Processor:
				- The central processing unit (CPU), or simply processor, là một engine mà để thông dịch (hoặc thực thi)
				  những chỉ thị được lưu tại main memory.
				- Ở tại lõi của processor là word-size storage device (or register) được gọi là program counter (PC).
				- Tại bất kỳ thời điểm nào, CP trỏ vào (chứa địa chỉ của) một số lệnh ngôn ngữ máy trong bộ nhớ chính.
				- Từ lúc cấp điện cho hệ thống đến khi ngắt điện, một processor lặp lại việc thực thi các chỉ thị được
				  trỏ bởi program counter và cập nhật program counter trỏ đến thị dẫn tiếp theo.
				- Một bộ xử lý dường như hoạt động the mô hình thực thi lệnh rất đơn giản, được xác định bởi kiến trúc
				  tập lệnh của nó.
				- Trong mô hình này, các lệnh thực thi theo trình tự nghiêm ngặt và việc thực thi một lệnh đơn liên quan đến
				  việc thực hiện một chuỗi các bước.
				- Processor đọc các chỉ thị thừ memory pointed bỏi program counter (PC), thông dịch các bits trong chỉ thị,
				  thực hiện một số thao tác đơn từ chỉ thị đó, và sau đó cập nhật PC để trỏ đến lệnh tiếp theo, chỉ thị này có thể
				  nằm liền kề trong bộ nhớ với lệnh vừa được thực thi.
				-> Chỉ có một vài thao tác đơn giản và chúng xoay quanh main memory, register file và arithmetic/logic unit (ALU).
				- Register file là một thiết bị lưu trữ nhỏ, nó bao gồm tập hợp các thanh khi kích thước từ (word-size register),
				  mỗi thanh ghi có tên riêng.
				- ALU tính toán các giá trị địa chỉ và dữ liệu mới.
				- Example:
					* Load: Copy một byte hoặc một word từ main memory tới register, ghi đè nội dung trước đó của register
					* Store: Copy một byte hoặc một word từ register tới vị trị tại main memory.
					* Operate: Copy nội dung của 2 register vào ALU, thực hiện tính toán trên 2 word và lưu trữ kết quả tại
								register, ghi đè nội dung trước của thanh ghi.
					* Jump: trích xuất một word từ chỉ thị của chính nó và copy word vào program counter (PC), ghi đè giá trị của
								PC trước đó.
		1.4.2: Running the hello Program
	1.5 Caches Matter
		- Một bài học quan trọng từ ví dụ này là hệ thông dành rất nhiều thời gian để di chuyển thông tin từ nơi này đến nơi khác.
		- Bởi vì quy luật vật lý nên thiết bị lưu trữ lớn sẽ chậm hơn thiết bị lưu trữ nhỏ. Và thiết bị nhanh hơn sẽ đắt hơn.
		- Rắc rối hơn nữa, khi công nghệ bán dẫn tiến bộ trong những năm qua, khoảng cách bộ xử lý - bộ nhớ này tiếp tục tăng lên.
			Việc làm cho bộ vi xử lý chạy nhanh hơn dễ dàng hơn và rẻ hơn là làm cho main memory chạy nhanh hơn.
		- Để thoả thuận với vấn đề processor-memory gap, người thiết kế hệ thông bổ xung thêm thiết bị lưu trữ bé hơn và nhanh hơn
			được gọi là cache memories (or simply caches) nó đón vai trò là các khu vực tạm thời cho thông tin mà bộ xử lý có thể cần
			trong tương lai gần (the near future).
		- Một trong những bài học quan trọng của quyển sách này là những nhà lập trình ứng dụng người có nhận thức với cache memories
			có thể khai thác chúng để cải thiện hiệu năng của chương trình theo một mức độ lớn.
	1.6 Storage Devices Form a Hierarchy
		- Khái niệm chèm thiế bị lưu trữ nhở hơn, nhanh hơn (cache memory) giữa bộ xử lý và thiết bị lớn hơn, chậm hơn (main memory)
			hoá ra là một ý tưởng chung.
	1.7 The Operatin System Manages the Hardware
		- Chúng ta có thể coi Hệ điều hành như một layer of software xen kẽ giữa chương trình ứng dụng và phần cứng.
		- Tất cả lỗ lực của một chương trình ứng dụng để thao tác phần cứng đều phải thông qua hệ điều hành.
		- Hệ điều hành có 2 mục đích chính:
			1. Bảo vệ phần cứng khỏi bị lạm dụng bởi các chương trình đang chạy.
			2. Cung cấp cho các ứng dụng các cơ chế đơn giản và thống nhất để thao tác với các thiết bị phần cứng cấp thấp
				phức tạp và thường rất khác biệt.
		1.7.1 Processes:
			- Khi một chương trinh như là hello chạy trên một hệ thống hiện đại, hệ điều hành cung cấp ảo tưởng rằng
				chương trình là chương trình duy nhất chạy trên hệ thống.
			- Chương trình dường như có quyền sử dụng độc quyền cả bộ xử lý, bộ nhớ chính và thiết bị I/O.
			- Bộ xử lý dường như chỉ thực thi chỉ thị của chương trình, từng dòng một mà không có sự gián đoạn.
			- Câu lênh và dữ liệu dường như chỉ là đối tượng duy nhất trong bộ nhớ hệ thống.
			- Illusions được cung cấp bởi khái niệm tiến tr, một trong những ý tưởng quan trọng và thành công nhất
				của khoa học máy tính.
			- Một tiến trình (a process) là cách hệ điều hành trừu tượng một chương trình đang chạy. Nhiều tiến trình có thể
				chạy đồng thời trên cùng một hệ thống, và mỗi tiến trình dường như có quyền sử dụng riêng hệ thống.
			- By concurrentlty, muốn nói rằng chỉ thị của một tiến trình bị xáo trộn cùng với những chỉ thị của tiến trình khác.
			- Trong hây hết các hệ thống, có nhiều tiến trình chạy hơn là số CPU dùng để chạy chúng.
			- Các hệ thống truyển thông chỉ có thể thực thi một chương trình tại một thời điểm, trong khi các bộ xử lý đa lõi
				mới hơn có thể thực thi một số chương trình đồng thời. Trong cả hai trường hợp, một CPU đơn dường như có thể
				thực thi nhiều tiến trình đồng thời bằng cách chuyển đổi tiến trình giữa chúng.
				-> Hệ điều hành thực hiện sự xáo trộng này bằng cơ chế được biết tới là context switching (chuyển đổi ngử cảnh).
			- Hệ điều hành theo dõi tất cả thông tin trạng thái (state) mà tiến trình cần để chạy. Trạng thái (state) biết tới
				như là context, bao gốm thông tin như là giá trị hiện thời của PC, register file, and nội dung của main memory.
			- Tại thời điểm này, một hệ thống đơn xử lý chỉ có thể thực thi câu lệnh cho một tiếng trình. Khi HĐH quyết định chuyển
				quyền kiểm soát từ tiến trình hiện tại sang tiến trình mới, nó sẽ thực hiện context switch bằng cách lưu lại 
				nội dung của tiến trình hiện tại, khôi phục context của tiến trình mới, và sau đó truyền lại quyền kiểm soát cho
				tiến trình mới.
		1.7.2 Threads
			- Mặc dù nghĩ tiến trình là một luồng kiếm soát đơn, trong hệ thống hiện đại một tiến trình thực sự bao gồm nhiều
				đơn vị thực thi, gọi là threads, mỗi đơn vị chạy trong cùng một ngữ cảnh tiến trình chia sẻ chung code vài
				global data.
			- Threads là một mô hình lập trình ngày càng quan trọng do yêu cầu về tính đồng thời trong các máy chủ mạng,
				vì việc chia sẻ dữ liệu giữ các threads đơn giản hơn giữ các process, và vì thread hiệu quả hơn process.
			- Multi-threading cũng là một cách làm cho chương trình chạy nhanh hơn khi có nhiều vi xử lý.
		1.7.3 Virtual Memory
			- Virtual memory là một sựu trừu tượng cung cấp cho mỗi tiến trình ảo tưởng rằng chỉ duy nhất tiến trình đón
				sử dụng main memory.
			- Mỗi tiến trình có một khung nhìn thống nhất về memory, được gọi là virtual address space.
			- Đối với Linux, vùng trên cùng của không gian địa chỉ được dành riêng cho mã và dữ liệu của hệ điều hành chung
				cho tất cả các tiến trình. Vùng thấp hơn của không gian địa chỉ giữ mã và dữ liệu được xác định bởi tiến trình
				của người dùng.
			- Virtual address space được nhìn thấy bởi mỗi tiến trình bao gồm một số vùng được xác định cụ thể, mỗi vùng có
				một mục đích cụ thể.
				* Program code and data: Code bắt đầu tại cùng một địa chỉ cố định cho tất cả các tiến trình, tiếp theo là các
										vị trí dữ liệu tương ứng với các biến C toàn cục. Các vùng mã và dữ liệu được khởi tạo
										trực tiếp từ content của tệp đối tượng thực thi - trong trường hợp này là hello